
module assignment1_frame(
	input        CLOCK_50,
	input        RESET_N,
	input  [3:0] KEY,
//	input  [9:0] SW,
	output [6:0] HEX0,
	output [6:0] HEX1,
	output [6:0] HEX2,
	output [6:0] HEX3,
	output [6:0] HEX4,
	output [6:0] HEX5,
	output [9:0] LEDR
);

	
	
	wire clk;
	wire rst;

	wire [3:0] state_number;
		
	wire key0_triggered;
	wire key1_triggered;

	reg key0_reg = 0;
	reg key1_reg = 0;
	
	
	assign clk = CLOCK_50;
	assign rst = ~RESET_N;


	assign key0_triggered = ~KEY[0] && ~key0_reg;
	assign key1_triggered = ~KEY[1] && ~key1_reg;
	
	// key0_triggered and key1_triggered signales works like an edge triggered signal 
	
	

	
	always@(posedge clk or posedge rst)
	begin: KEY0_REG
		if(rst) begin
			key0_reg <= 1'b0;
		end
		else begin
			key0_reg <= ~KEY[0];
		end
	end
	
	always@(posedge clk or posedge rst)
	begin: KEY1_REG
		if(rst) begin
			key1_reg <= 1'b0;
		end
		else begin
			key1_reg <= ~KEY[1];
		end
	end
	
						
	always@(posedge clk or posedge rst)begin 
	
	end

	
		
	/* For debugging */
	
	SevenSeg ss0(.IN(state_number),.OFF(1'b0),.OUT(HEX0));
	/*
	SevenSeg ss1(.IN(timer[31:28]),.OFF(1'b0),.OUT(HEX1));
	SevenSeg ss2(.IN(timer[27:24]),.OFF(1'b0),.OUT(HEX2));
	SevenSeg ss3(.IN(timer[23:20]),.OFF(1'b0),.OUT(HEX3));
	SevenSeg ss4(.IN(timer[19:16]),.OFF(1'b0),.OUT(HEX4));
	SevenSeg ss5(.IN(blink_reg),.OFF(1'b0),.OUT(HEX5));
	*/

	
endmodule